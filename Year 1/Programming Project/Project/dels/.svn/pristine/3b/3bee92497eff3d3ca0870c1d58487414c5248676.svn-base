// brendan 20/04 - redesigned home page.
// brendan 20/04 - reimplemented screen transitions and tweaked sound effects.
// beibhinn 19/04 - deleted scroll area list and minor bug fix when using full screen map, picking michigan overlapped with guam button. Just move mouse slightly after un-fullscreening the map to use territory buttons.
// brendan 19/04 - implemented sound effects.
// chike 18/04 - Fixed some scaling issues, added user options to screen 3 (g1), labelled event buttons, fixed radio buttons and checkboxes, and added quit screen. Slider on screen 2 is still not working.
// chike 16/04 - Added Slider class, fixed scaling and alignment issues on screen 2, added slider on screen 2 for area list, added extra screen for more geoMap sizes and its widgets, scaled all widgets
// odhran 14/04 - Implemented zooming in on screen 1
// beibhinn + brendan 13/04 - added NYTimes API with two different queries to display in horizontal scroll bar on home page 
//      -> not sure if it's pulling latest headlines or the same one every time - might need to make a string array of queries and switch it every so often
// chike     13/04 - Added the ability to scroll using the mouse wheel or touch pad on screen 5. Fixed scaling issues so screen 1 now scales with monitor screens. 
// brendan  13/04 - Implemented Screen transitions.
// odhran   12/04 - Implemented scrollbars
// brendan  12/04 - Fixed some bugs with the search bar on screen 1 that happened when invalid inputs are entered.
// beibhinn 11/04 - Some design changes to screen 2 - still have to add widgets so the other graphs can be accessed.
// beibhinn 10/04 - Added a scrollable listbox from the controlP5 library instead of the list of areas because it wasn't scrollable. Will fix the actual layout later!
// chike   10/04 - Fixed a bug where pressing "NEXT" before any dates were selected on screen 4.2 (g7) would cause the program to crash.
// chike    8/04 - Fixed a bug where entering dates in reverse order on screen 4.2 (g7) caused the program to crash.
// brendan  8/04 - cleaned/tidied up code by adding methods and creating a new GlobalVariables tab
// odhran   7/04 - added an image to home page and an embedded link button, a screen to see all the raw data and horizontally scrolling text bar
// brendan  7/04 - user can type in desired state alongside selecting the state from the map. if an invalid state is entered, an error is shown.
// beibhinn 7/04 - implemented the controlP5 GUI to begin making drop down lists for choosing dates - just need to get it to return a specific date and pass that to the graph 7
// beibhinn 6/04 - integrated Chike's code from loadTableData file and implemented widgets for user options to deal with graph 3,5,7 - problem with graph 7, entering dates
// Beibhinn 29/03 - integrated the design basis with the barChartAndInput program
// beibhinn 1/4 - added american territories as widgets

import controlP5.*;
import org.gicentre.geomap.*;
import java.util.AbstractMap.SimpleEntry;
import java.util.Map.Entry;
import java.util.*;
import java.text.*;
import com.temboo.core.*;
import com.temboo.Library.Twitter.Search.*;
import processing.sound.*;

void settings() {
  // size(888, 500);
  fullScreen();
}

void setup() {
  frameRate(60); // was originally 30, but a higher framerate makes the screen transitions look much smoother.
  sbx = new Scrollbar(0, height-15, "x");
  sby = new Scrollbar(width-15, 0, "y");
  td = new TableData("cases-97k.csv"); // switched from 10k to 97k because the 10k dataset didn't contain Northern Mariana Islands
  session = new TembooSession("group32hi", "myFirstApp", "Yf6C8wEy7LDYfvzWR5yjVF4oRMibTqA7");
  //covidPic = loadImage("covid-pic.jpg");
  maskPeople = loadImage("maskPeople.png");
  vaccinePic = loadImage("vaccineImage.png");
  twitterLogo = loadImage("twitterLogo.jpg");
  blingSFX = new SoundFile(this, "bling.wav");
  blingSFX.amp(0.5); // volume
  clickSFX = new SoundFile(this, "click.wav");
  clickSFX.amp(0.2); // volume
  errorSFX = new SoundFile(this, "error.wav");
  errorSFX.amp(0.5); // volume
  stdFont=loadFont("MS-Gothic-26.vlw");   // changed font size to match text size
  arialFont = createFont("ArialNovaCond-48.vlw", 32);
  textFont(stdFont);
  searchText = "covid";
  runTweetsChoreo(); // Run the Tweets Choreo function
  getTweetFromJSON(); // Parse the JSON response
  displayText(); // Display the response

  apiKey = "9OaT50AMoryO2RMBWcIYEBCHQGLAhAIx";
  url = "http://api.nytimes.com/svc/search/v2/articlesearch.json?q=coronavirus";
  query = "?q=a&sort=newest";
  json = loadJSONObject(url+query+"&api-key="+apiKey);
  headline = json.getJSONObject("response").getJSONArray("docs").getJSONObject(0).getJSONObject("headline").getString("main");

  // Adds all valid hover events (events for widgets that light up when hovered over) to an Integer arraylist.
  validHoverEvents.add(EVENT_BUTTON0);
  validHoverEvents.add(EVENT_BUTTON1);
  validHoverEvents.add(EVENT_BUTTON2);
  validHoverEvents.add(EVENT_BUTTON3);
  validHoverEvents.add(EVENT_BUTTON4);
  validHoverEvents.add(EVENT_BUTTON5);
  validHoverEvents.add(EVENT_BUTTON6);
  validHoverEvents.add(EVENT_BUTTON7);
  validHoverEvents.add(EVENT_BUTTON8);
  validHoverEvents.add(EVENT_BUTTON9);
  validHoverEvents.add(EVENT_BUTTON18);
  validHoverEvents.add(EVENT_BUTTON19);
  validHoverEvents.add(EVENT_BUTTON20);
  validHoverEvents.add(EVENT_BUTTON21);
  validHoverEvents.add(EVENT_BUTTON23);
  validHoverEvents.add(EVENT_BUTTON3);
  validHoverEvents.add(EVENT_BUTTON24);
  validHoverEvents.add(EVENT_BUTTON25);
  validHoverEvents.add(EVENT_BUTTON26);
  validHoverEvents.add(EVENT_BUTTON28);
  validHoverEvents.add(EVENT_BUTTON29);
  validHoverEvents.add(EVENT_ALLAREA1);
  validHoverEvents.add(EVENT_ALLAREA2);
  validHoverEvents.add(EVENT_ALLAREA3);
  validHoverEvents.add(EVENT_ALLAREA_DATE);
  validHoverEvents.add(DATE_CONFIRMED);

  createScreens();                     // method to create screens
  currentScreen = screen0;

  createScrollableList();              // method to create scrollable list
  createGraphs();                      // method to create graphs
  createWidgets();                     // method to create widgets

  sld_2 = new Slider(47*width/60, height/2, 30, 35, "", color(BLACK), color(BLACK), color(BLACK), EVENT_BUTTON27, 5*height/13, "y"); // slider instantiation

  baseYCountT = height/1.875; // variable top. can be changed with slider.
  baseYCountB = height/1.875 + 9*height/26; // hardcoded bottom

  geoMap_st = new GeoMap(width/22, height/4, width/2, height/1.75, this); // standard geoMap - minimised one on screen 1
  geoMap_st.readFile("States_shapefile");   // Read shapefile. //tl_2017_us_state

  geoMap_sc_1 = new GeoMap(7*width/16, 9*height/20, width*0.125, height*0.1, this);   // zoom -2
  geoMap_sc_2 = new GeoMap(3*width/8, 2*height/5, width*0.25, height*0.2, this);      // zoom -1
  geoMap_sc_3 = new GeoMap(width/4, height/4, width*0.5, height*0.5, this);           // zoom 0
  geoMap_sc_4 = new GeoMap(width/8, 3*height/20, width*0.75, height*0.7, this);       // zoom 1
  geoMap_sc_5 = new GeoMap(0, 0, width, height, this);                                // zoom 2
  geoMap_sc = geoMap_sc_3;                                                            // default scale map (mapScale 0)

  geoMap_c = geoMap_st;   // default geoMap is the standard one

  for (char c : tempAlpha.toCharArray()) {
    alphabet.add(c);
  }
}


void draw() {
  pushMatrix();
  if (moveScreenY) {
    currentScreen.moveScreenY();
  } else if (moveScreenX) {
    currentScreen.moveScreenX();
  }

  if (zoomIn) {
    if (mapScale <= 2) {
      mapScale += 1;
    }
  } else if (zoomOut) {
    if (mapScale >= -2) {
      mapScale -= 1;
    }
  } else if (zoomReset) {
    mapScale = 0;
  }

  if (mapScale > 2) mapScale = 2;
  if (mapScale < -2) mapScale = -2;

  scale(scaler);
  translate(centerX + slide, centerY);
  moveScreenY = false;
  moveScreenX = false;
  stroke(BLACK);
  strokeWeight(1);
  background(currentScreen.backgroundColor);    
  if (slide > 0) {
    slide -= width/10;
  } else {
    slide = 0;
  }

  if (currentScreen == screen0) {
    drawScreen0();
  } else if (currentScreen == screen1) {
    drawScreen1();
  } else if (currentScreen == screen1_2) {
    drawScreen1_2();
  } else if (currentScreen == screen2) {
    drawScreen2();
  } else if (currentScreen == screen3) {
    // println(3);
    drawScreen3();
  } else if (currentScreen == screen4) {
    // println(4);
    drawScreen4();
  } else if (currentScreen == screen4_2) {
    // println(4.2);
    drawscreen4_2();
  } else if (currentScreen == screen5) {
    td.getFormattedInfo(rawTextPos, 12);    // Using different method of printing raw data to screen to allow for easier scrolling.
  }

  currentScreen.drawWidgets();
  popMatrix();
  translate(slide, 0);
  fill(WHITE);
  if (currentScreen == screen1) {
    if (scaler>1) {
      line(width-15, 0, width-15, height);
      sbx.dif = width/10;
      sbx.draw();
      line(0, height-15, width, height-15);
      sby.dif = height/10;
      sby.draw();
    }
  }
  if (currentScreen == screen2) {
    /* sbx.dif = width/30;
     sbx.draw();
     // line(0, height-15, width, height-15);
     line(4*width/5, height/2, 4*width/5, 23*height/26); // vertical slider border
     line(47*width/60, height/2, 4*width/5, height/2); // top slider border
     line(47*width/60, 23*height/26, 4*width/5, 23*height/26); // bottom slider border
     sby.dif = height/30;
     sby.draw(); */
  }

  if (hasQuit) {
    background(BLACK);
    textAlign(CENTER);
    fill(WHITE);
    textSize(26);
    text("Thanks, and stay safe!\n\n\nGroup 32", width/2, height/2);
    exitTimer -= exitSpeed;
  }

  if (exitTimer <= 0) {
    System.exit(0);
  }
}

static void removeDuplicates(ArrayList arr) {
  // send arraylist to linkedhashset to preserve order and remove duplicated
  Set<Object> tempSet = new LinkedHashSet<Object>(arr);   
  arr.clear();
  arr.addAll(tempSet);
}

void keyPressed() {
  if (key == ENTER || key == RETURN) {
    if (currentScreen == screen1) {
      if (input != "") {
        selectedState = input;
        co = td.getCountry("united states");
        if (co.containsState(selectedState)) {
          state = co.getState(selectedState);
          currentScreen = screen2;
          slide = width;
          errorInput = false;
          clickSFX.play();
        } else {
          errorInput = true;
          selectedState = "";
          errorSFX.play();
        }
        input = "";
        if (state != null) {
          ArrayList<Area> areas = state.getAreas();
          String[] arrAreas = new String[areas.size()];
          int index = 0;
          for (Area a : areas) {
            arrAreas[index] = a.getName();
            index++;
          }
        }
      } else if (selectedState != "") {
        co = td.getCountry("united states");
        state = co.getState(selectedState);
        currentScreen = screen2;
        slide = width;
        sld_2.resetPos();
        sld_2.bound();
        input = "";
        errorInput = false;
        noSelectedArea = false;
        clickSFX.play();
      } else {
        errorInput = true;
        errorSFX.play();
      }
    } else if (currentScreen == screen2) {
      if (input != "") {
        strcounty = input;
        State state = td.getCountry(0).getState(selectedState);
        if (state.containsArea(input)) {
          currentScreen = screen3;
          slide = width;
          clickSFX.play();
        } else {
          input = "";
          errorInput = true;
          errorSFX.play();
        }
      } else {
        noSelectedArea = true;
        errorSFX.play();
      }
    }
  } else if (key == BACKSPACE) {
    if (input.equalsIgnoreCase("")) {
      input = "";
    } else {
      input = input.substring(0, input.length()-1);
    }
  } else if (alphabet.contains(Character.toLowerCase(key))) {
    input += key;
  }
}

void mousePressed() {
  if (sbx.hover()) {
    sbx.updatex();
    moveScreenX = true;
  } else if (sby.hover()) {
    sby.updatey();
    moveScreenY = true;
  }
  int id = geoMap_c.getID(int((mouseX-centerX)/scaler - centerX-sbx.xpos/scaler), int((mouseY-centerY)/scaler - centerY-sby.ypos/scaler));
  if ((currentScreen == screen1 || currentScreen == screen1_2) && id != -1) {
    selectedState = geoMap_c.getAttributeTable().findRow(str(id), 0).getString("State_Name");
    geoMap_c = geoMap_st;
    currentScreen = screen1;
    blingSFX.play();
  }
  if (currentScreen == screen4_2) {
    if (mouseX >= 100 && mouseX <= 300 && mouseY >= 50 && mouseY <= 150) {
      pickingDate1 = true;
      pickingDate2 = false;
    }
    if (mouseX >= 600 && mouseX <= 800 && mouseY >= 50 && mouseY <= 150) {
      pickingDate1 = false;
      pickingDate2 = true;
    }
  }

  int event = currentScreen.getEvent(int((mouseX-centerX)/scaler - centerX-sbx.xpos/scaler), int(mouseY/scaler - centerY));

  switch (event) {
  case EVENT_BUTTON1:  
    currentScreen = screen0;
    zoomReset = true;
    query = "?q=vaccine&sort=newest";
    json = loadJSONObject(url+query+"&api-key="+apiKey);
    headline = json.getJSONObject("response").getJSONArray("docs").getJSONObject(0).getJSONObject("headline").getString("main");
    selectedState = "";
    input = "";
    errorInput = false;
    noSelectedArea = false;
    centerX = 0;
    centerY = 0;
    sbx.reset();
    sby.reset();
    slide = width;
    clickSFX.play();
    break;
  case EVENT_BUTTON2:
    zoomReset = true;
    sbx.reset();
    sby.reset();
    if (selectedState != "") {
      co = td.getCountry("united states");
      state = co.getState(selectedState);
      currentScreen = screen2;
      slide = width;
      sld_2.resetPos();
      sld_2.bound();
      input = "";
      errorInput = false;
      noSelectedArea = false;
      clickSFX.play();
    } else if (input != "") {
      selectedState = input;
      co = td.getCountry("united states");
      if (co.containsState(selectedState)) {
        state = co.getState(selectedState);
        currentScreen = screen2;
        slide = width;
        sld_2.resetPos();
        sld_2.bound();
        errorInput = false;
        noSelectedArea = false;
        clickSFX.play();
      } else {
        selectedState = "";
        errorInput = true;
        errorSFX.play();
      }
    } else {
      noStateSelected = true;
      errorSFX.play();
    }
    input = "";
    centerX = 0;
    centerY = 0;
    if (state != null) {
      ArrayList<Area> areas = state.getAreas();
      String[] arrAreas = new String[areas.size()];
      int index = 0;
      for (Area a : areas) {
        arrAreas[index] = a.getName();
        index++;
      }
    }
    break;
  case EVENT_BUTTON3:
    zoomReset = true;
    currentScreen = screen1;
    geoMap_c = geoMap_st;
    selectedState = "";
    input = "";
    errorInput = false;
    noStateSelected = false;
    centerX = 0;
    centerY = 0;
    slide = width;
    clickSFX.play();
    break;
  case EVENT_BUTTON4:
    zoomReset = true;
    currentScreen = screen2;
    input = "";
    errorInput = false;
    noStateSelected = false;
    cp5.get(ScrollableList.class, "dropdown").setVisible(false);
    cp5b.get(ScrollableList.class, "dropdown").setVisible(false);
    centerX = 0;
    centerY = 0;
    slide = width;
    clickSFX.play();
    break;
  case EVENT_BUTTON6:
    if (currentScreen == screen1 && !usingMap) {
      selectedState = "PUERTO RICO";
    }
    centerX = 0;
    centerY = 0;
    blingSFX.play();
    break;
  case EVENT_BUTTON7:
    if (currentScreen == screen1 && !usingMap) {
      selectedState = "GUAM";
    }
    centerX = 0;
    centerY = 0;
    blingSFX.play();
    break;
  case EVENT_BUTTON8:
    if (currentScreen == screen1 && !usingMap) {
      selectedState = "VIRGIN ISLANDS";
    }
    centerX = 0;
    centerY = 0;
    blingSFX.play();
    break;
  case EVENT_BUTTON9:
    if (currentScreen == screen1 && !usingMap) {
      selectedState = "NORTHERN MARIANA ISLANDS";
    }
    centerX = 0;
    centerY = 0;
    blingSFX.play();
    break;
  case EVENT_BUTTON18:
    currentScreen = screen5;
    rawTextPos = baseRawTextPos;
    centerX = 0;
    centerY = 0;
    clickSFX.play();
    break;
  case EVENT_BUTTON19:
    link("https://www.cdc.gov/coronavirus/2019-ncov/index.html");
    centerX = 0;
    centerY = 0;
    clickSFX.play();
    break;
  case EVENT_BUTTON20:
    // scroll down (ypos decreases)
    rawTextPos -= speed;
    clickSFX.play();
    // text cannot go past these limits.
    if (rawTextPos >= 1.5*baseRawTextPos) {
      // if the top of the text is greater than 1.5 times the limit
      // keep it in place
      rawTextPos = baseRawTextPos;
    }
    if (rawTextPos <= -td.getMaxTextHeight()) {
      rawTextPos = -td.getMaxTextHeight();
    }
    break;
  case EVENT_BUTTON21:
    // scroll up (ypos increases)
    clickSFX.play();
    rawTextPos += speed;
    if (rawTextPos >= 1.5*baseRawTextPos) {
      rawTextPos = baseRawTextPos;
    }
    if (rawTextPos <= -td.getMaxTextHeight()) {
      rawTextPos = -td.getMaxTextHeight();
    }
    break;
  case EVENT_BUTTON23:
    usingMap = true;
    currentScreen = screen1_2;
    clickSFX.play();
    break;
  case EVENT_BUTTON24:
    zoomIn = true;
    clickSFX.play();
    break;
  case EVENT_BUTTON25:
    zoomOut = true;
    clickSFX.play();
    break;
  case EVENT_BUTTON26:
    zoomReset = true;
    clickSFX.play();
    break;
  case EVENT_BUTTON27:
    sld_2.bound();
    break;
  case EVENT_BUTTON28:
    currentScreen.radioToggle(1);
    currentScreen.radioToggle(2);
    clickSFX.play();
    break;
  case EVENT_BUTTON29:
    currentScreen.checkBoxes(); 
    clickSFX.play();
    break;
  case EVENT_ALLAREA1:
    currentScreen = screen4;
    allAreasGraphType = 1;
    centerX = 0;
    centerY = 0;
    slide = width;
    clickSFX.play();
    break;
  case EVENT_ALLAREA2:
    currentScreen = screen4;
    allAreasGraphType = 2;
    centerX = 0;
    centerY = 0;
    slide = width;
    clickSFX.play();
    break;
  case EVENT_ALLAREA3:
    currentScreen = screen4;
    allAreasGraphType = 3;
    centerX = 0;
    centerY = 0;
    slide = width;
    clickSFX.play();
    break;
  case EVENT_ALLAREA_DATE:
    currentScreen = screen4_2;
    cp5.get(ScrollableList.class, "dropdown").setVisible(true);
    cp5.get(ScrollableList.class, "dropdown").clear();
    cp5.get(ScrollableList.class, "dropdown").addItems(state.makeDates(state.totalData()));     // add the dates for the chosen states
    cp5b.get(ScrollableList.class, "dropdown").setVisible(true);
    cp5b.get(ScrollableList.class, "dropdown").clear();
    cp5b.get(ScrollableList.class, "dropdown").addItems(state.makeDates(state.totalData()));     // add the dates for the chosen states
    datesEntered = false;
    centerX = 0;
    centerY = 0;
    slide = width;
    clickSFX.play();
    break;
  case DATE_CONFIRMED:
    datesEntered=true;
    centerX = 0;
    centerY = 0;
    blingSFX.play();
    break;
  case DATE_BUTTON11:
    centerX = 0;
    centerY = 0;
    clickSFX.play();
    break;
  case DATE_BUTTON12:
    centerX = 0;
    centerY = 0;
    clickSFX.play();
    break;
  case EVENT_BUTTON0:
    hasQuit = true;
    clickSFX.play();
    break;
  }
}

void mouseWheel(MouseEvent me) {
  // when the mouse wheel is scrolled, move the text on screen up or down.
  float event = me.getCount();

  // test position
  rawTextPos -= event * speed;

  // text cannot go past these limits.
  if (rawTextPos >= 1.5*baseRawTextPos) {
    rawTextPos = baseRawTextPos;
  }
  if (rawTextPos <= -td.getMaxTextHeight()) {
    rawTextPos = -td.getMaxTextHeight();
  }
}

void mouseMoved() {
  if (currentScreen == screen1) usingMap = false;
  if (sbx.hover())sbx.updatex();
  if (sby.hover())sby.updatey();
  int event;
  for (int i = 0; i < currentScreen.widgetList.size(); i++) {
    Widget aWidget = (Widget) currentScreen.widgetList.get(i);
    event = aWidget.getEvent(int((mouseX-centerX)/scaler - centerX-sbx.xpos/scaler), int(mouseY/scaler - centerY));
    aWidget.setBorderIsWhite(false);
    if (validHoverEvents.contains(event)) {
      // Replaced second large switch-case statement with this.
      aWidget.setBorderIsWhite(true);
    }
  }
  if (sld_2.getEvent(mouseX, mouseY) == EVENT_BUTTON27) { // if hovering over slider controller, turn border white
    sld_2.borderColor = WHITE;
  } else {
    sld_2.borderColor = BLACK;
  }
}

void mouseDragged() {
  if (sbx.hover()) {
    sbx.updatex();
    moveScreenX = true;
    sby.updatey();
    moveScreenY = true;
  }

  // chike - 16/04: added slider function
  // int event = currentScreen.getEvent(int((mouseX-centerX)/scaler - centerX-sbx.xpos/scaler), int((mouseY-centerY)/scaler - centerY-sby.ypos/scaler));
  int event = sld_2.getEvent(mouseX, mouseY);
  if (event == EVENT_BUTTON27 && sld_2.canMove) {
    sld_2.bound();
  }
}

void createScreens() {
  screen0 = new Screen(80); // home page
  screen1 = new Screen(100); // map page
  screen1_2 = new Screen(50); // interactive screen for map
  screen2 = new Screen(200); // area choice screen
  screen3 = new Screen(50); // area chosen screen - basic area graphs
  screen4 = new Screen(100); // other graph page
  screen4_2 = new Screen(100); // and another graph page :)
  screen5 = new Screen(100);  // display formatted raw csv data
}

void createScrollableList() {
  cp5 = new ControlP5(this);
  cp5.addScrollableList("dropdown")
    .setVisible(false)
    .setPosition(100, 50)
    .setBackgroundColor(200)
    .setSize(200, 100)
    .setBarHeight(20)
    .setItemHeight(20);

  cp5b = new ControlP5(this);
  cp5b.addScrollableList("dropdown")
    .setVisible(false)
    .setPosition(600, 50)
    .setBackgroundColor(200)
    .setSize(200, 100)
    .setBarHeight(20)
    .setItemHeight(20);
}

void dropdown(int n) {
  /* request the selected item based on index n */

  if (pickingDate1) {
    Map item = cp5.get(ScrollableList.class, "dropdown").getItem(n);
    date1 = (String) item.get("name");
    println(item.get("name"));
    clickSFX.play();
  } else if (pickingDate2) {
    Map itemb = cp5b.get(ScrollableList.class, "dropdown").getItem(n);
    date2 = (String) itemb.get("name");
    println(itemb.get("name"));
    clickSFX.play();
  }

  //println(itemb.get("name"));
}

void createGraphs() {
  // All graph queries

  // Cases against dates given area   (query req. 1)
  g1 = new Graph(width/11, height/10, width-width/7, height/2, color(255, 255, 150, 80), color(100, 30, 100), 9, "area", "ybar", false);
  // 
  // Cumulative cases against dates given state
  g2 = new Graph(width/11, height/10, width-width/7, height/2, color(255, 255, 150, 80), color(100, 30, 100), 9, "lchart", "ybar", false);
  // 
  // Cases in all areas with a state given state
  g3 = new Graph(width/11, height/10, width-width/7, height/2, color(255, 255, 150, 80), color(100, 30, 100), 9, "bar", "ybar", true);
  // 
  // Largest difference between two consecutive dates in an area    (query req. 2)
  g4 = new Graph(width/11, height/10, width-width/7, height/2, color(255, 255, 150, 80), color(100, 30, 100), 9, "scatter", "ybar", true);
  // 
  // Largest difference between two consecutive dates in an state
  g5 = new Graph(width/11, height/10, width-width/7, height/2, color(255, 255, 150, 80), color(100, 30, 100), 9, "hist", "ybar", true);
  // 
  // Data in a user-chosen range of two dates in an area
  g6 = new Graph(width/11, height/10, width-width/7, height/2, color(255, 255, 150, 80), color(100, 30, 100), 9, "bar", "ybar", true);
  // 
  // Data in a user-chosen range of two dates in a state
  g7 = new Graph(width/11, height/10, width-width/7, height/2, color(255, 255, 150, 80), color(100, 30, 100), 9, "hist", "ybar", false);
  // 
  // Data with highest difference between two consecutive dates between two user-chosen dates in an area. combines g4 and g6.
  g8 = new Graph(width/11, height/10, width-width/7, height/2, color(255, 255, 150, 80), color(100, 30, 100), 9, "hist", "ybar", true);
  //
  // Data with highest difference between two consecutive dates between two user-chosen dates in a state. combines g5 and g7.
  g9 = new Graph(width/11, height/10, width-width/7, height/2, color(255, 255, 150, 80), color(100, 30, 100), 9, "hist", "ybar", true);
  // 
  // Cumulative cases against dates given country
  g10 = new Graph(width/11, height/10, width-width/7, height/2, color(255, 255, 150, 80), color(100, 30, 100), 9, "hist", "ybar", false);
}

void createWidgets() {
  // chike - 13/04: changed some (not all; i'll do that later) position values to make them scale with the screen size
  screen0.addWidget(21*width/112, floor(height/2.5), width/9, height/20, "Pick a State", color(BLACK), color(WHITE), stdFont, EVENT_BUTTON3);
  screen0.addWidget(21*width/112, floor(height/1.75), width/9, height/20, "Raw Data", color(BLACK), color(WHITE), stdFont, EVENT_BUTTON18);
  screen0.addWidget(4*width/9, height-height/11, width/9, height/20, "More information", color(BLACK), color(WHITE), stdFont, EVENT_BUTTON19);
  screen0.addWidget(width/50, height/40, width/15, height/20, "Quit", color(BLACK), color(WHITE), stdFont, EVENT_BUTTON0);

  screen1.addWidget(width/13, height/8, width/13, height/20, "Back to Home", color(LIGHT_GREY), color(BLACK), stdFont, EVENT_BUTTON1);
  screen1.addWidget(floor(7.25*width/8), height/5, width/13, height/20, "Next", color(DARK_GREY), color(BLACK), stdFont, EVENT_BUTTON2); 
  screen1.addWidget(36*width/56, 4*height/10, width/13, height/20, "Puerto Rico", color(LAND_COLOUR), color(BLACK), stdFont, EVENT_BUTTON6);
  screen1.addWidget(36*width/56, 5*height/10, width/13, height/20, "Guam", color(LAND_COLOUR), color(BLACK), stdFont, EVENT_BUTTON7);
  screen1.addWidget(36*width/56, 6*height/10, width/13, height/20, "Virgin Islands", color(LAND_COLOUR), color(BLACK), stdFont, EVENT_BUTTON8);
  screen1.addWidget(36*width/56, 7*height/10, floor(width/8), height/20, "Northern Mariana Islands", color(LAND_COLOUR), color(BLACK), stdFont, EVENT_BUTTON9);
  screen1.createSearchBar(floor(4.5*width/7), height/5, width/4, height/20, "Type or select a state", color(WHITE), color(BLACK), stdFont, EVENT_BUTTON17);
  screen1.addWidget(floor(3*width/8), height/5+25, width/10, height/20, "Full Screen Mode", color(DARK_GREY), color(BLACK), stdFont, EVENT_BUTTON23); 

  screen1_2.addWidget(width - width/10, 3*height/32, width/13, height/20, "Zoom in", color(DARK_GREY), color(BLACK), stdFont, EVENT_BUTTON24); 
  screen1_2.addWidget(width - width/10, 6*height/32, width/13, height/20, "Zoom out", color(DARK_GREY), color(BLACK), stdFont, EVENT_BUTTON25); 
  screen1_2.addWidget(width - width/10, 9*height/32, width/13, height/20, "Reset Scale", color(DARK_GREY), color(BLACK), stdFont, EVENT_BUTTON26); 
  screen1_2.addWidget(width/50, height/40, width/13, height/20, "Back", color(DARK_GREY), color(BLACK), stdFont, EVENT_BUTTON3);


  screen2.addWidget(width/27, height/15, width/14, height/19, "Back", color(LIGHT_GREY), color(BLACK), stdFont, EVENT_BUTTON3);
  screen2.createSearchBar(floor(width/1.875), height/3, floor(width/2.7), height/19, "Enter an area", color(WHITE), color(BLACK), stdFont, EVENT_BUTTON5);
  screen2.addWidget(floor(width/5.5), floor(height/2.56), width/34, height/19, "2", color(LIGHT_GREY), color(BLACK), stdFont, EVENT_ALLAREA3);
  screen2.addWidget(floor(width/5.5), floor(height/1.92), width/34, height/19, "3", color(LIGHT_GREY), color(BLACK), stdFont, EVENT_ALLAREA1);
  screen2.addWidget(floor(width/5.5), floor(height/1.5), width/34, height/19, "5", color(LIGHT_GREY), color(BLACK), stdFont, EVENT_ALLAREA2);
  screen2.addWidget(floor(width/5.5), floor(height/1.28), width/34, height/19, "7", color(LIGHT_GREY), color(BLACK), stdFont, EVENT_ALLAREA_DATE);



  screen3.addWidget(width/27, height/25, width/14, height/19, "Back", color(LIGHT_GREY), color(BLACK), stdFont, EVENT_BUTTON4);
  // change graph background
  screen3.addRadio(width/8, 13*height/16, width/40, width/40, "", color(LIGHT_GREY), color(BLACK), stdFont, EVENT_BUTTON28, 1); 
  screen3.addRadio(width/8, 14*height/16, width/40, width/40, "", color(LIGHT_GREY), color(BLACK), stdFont, EVENT_BUTTON28, 1);
  screen3.addRadio(width/8, 15*height/16, width/40, width/40, "", color(LIGHT_GREY), color(BLACK), stdFont, EVENT_BUTTON28, 1);
  // change graph element type (bar, scatter, etc.)
  screen3.addRadio(floor(width/2.5), 13*height/16, width/40, width/40, "", color(LIGHT_GREY), color(BLACK), stdFont, EVENT_BUTTON28, 2); 
  screen3.addRadio(floor(width/2.5), 14*height/16, width/40, width/40, "", color(LIGHT_GREY), color(BLACK), stdFont, EVENT_BUTTON28, 2);
  screen3.addRadio(floor(width/2.5), 15*height/16, width/40, width/40, "", color(LIGHT_GREY), color(BLACK), stdFont, EVENT_BUTTON28, 2);
  screen3.addRadio(width/2, 13*height/16, width/40, width/40, "", color(LIGHT_GREY), color(BLACK), stdFont, EVENT_BUTTON28, 2); 
  screen3.addRadio(width/2, 14*height/16, width/40, width/40, "", color(LIGHT_GREY), color(BLACK), stdFont, EVENT_BUTTON28, 2);
  screen3.addRadio(width/2, 15*height/16, width/40, width/40, "", color(LIGHT_GREY), color(BLACK), stdFont, EVENT_BUTTON28, 2);
  // show data on hover boolean
  screen3.addCheckBox(7*width/9, 13*height/16, width/40, width/40, "", color(LIGHT_GREY), color(BLACK), stdFont, EVENT_BUTTON29);


  screen4.addWidget(width/14, floor(height/1.1), width/14, height/19, "Back", color(LIGHT_GREY), color(BLACK), stdFont, EVENT_BUTTON4);

  screen4_2.addWidget(floor(width/3.4), floor(height/15.4), width/23, height/19, "NEXT", color(LIGHT_GREY), color(BLACK), stdFont, DATE_CONFIRMED);
  screen4_2.addWidget(width/14, floor(height/1.1), width/14, height/19, "Back", color(LIGHT_GREY), color(BLACK), stdFont, EVENT_BUTTON4);

  screen5.addWidget(floor(width/1.5), height/60, width/14, height/20, "Back to Home", color(LIGHT_GREY), color(BLACK), stdFont, EVENT_BUTTON1);
  screen5.addWidget(floor(width/1.1), floor(height/1.1), width/14, height/15, "Scroll Down", color(LIGHT_GREY), color(BLACK), stdFont, EVENT_BUTTON20);
  screen5.addWidget(floor(width/1.1), floor(height/1.3), width/14, height/15, "Scroll Up", color(LIGHT_GREY), color(BLACK), stdFont, EVENT_BUTTON21);
}

void drawScreen0() {
  stroke(BLACK);
  fill(230);
  rect(width/30, height/4, 13.5*width/30, height/2, 15); // Left rect
  rect(15.5*width/30, height/4, 13.5*width/30, height/2, 15); // Right rect
  fill(WHITE);
  rect(37*width/64, 35*height/64, 2.57*width/7.7, height/5.5, 25);
  fill(BLACK);
  stroke(BLACK);
  image(twitterLogo, 19*width/32, height/1.8, 70, 51);
  textSize(22);
  text("Latest From Twitter:", 41*width/64, height/1.7);
  textSize(19);
  text(tweetText, 19*width/32, height/1.63, 2.4*width/7.7, height/2);
  //image(covidPic, width/2.7, height/5, width/2, height/2);
  image(vaccinePic, 37*width/64, 9*height/32, width/7.7, height/4.3);
  image(maskPeople, 50*width/64, 9*height/32, width/7.7, height/4.3);
  fill(BLACK);
  stroke(WHITE);
  textSize(40);
  text("Home", 9*width/40, height/3);
  fill(WHITE);
  rect(0, height/1.2, width, height/25);
  String wrapText = "Latest from The NY Times: " + headline;
  float wrapLength = textWidth(wrapText);
  fill(BLACK);
  textSize(35);
  text(wrapText, textx, height/1.15);
  textx--;
  if (textx <=0) {
    text(headline, textx+width, height/1.15);
  }
  if (textx + wrapLength == 0) {
    textx = width-wrapLength;
  }
}

void drawScreen1() {
  stroke(0, 40);              // Boundary colour

  noStroke();
  fill(230);                 // light gray for rect
  rect(width/56, height/16, 4*width/7, 14*height/16, 15);  // geomap case (rect 1)
  stroke(BLACK);
  fill(202, 226, 245);       // ocean color
  rect(width/28, height/12, 3.75*width/7, 13.25*height/16);  // ocean

  fill(230);
  rect(33.5*width/56, height/16, 2.75*width/7, 14*height/16, 10); // state search case (rect 2)
  fill(BLACK);
  textFont(stdFont);
  textSize(16);
  text("United States", width/4, height/8);

  // Draw entire world map.
  fill(206, 173, 146);        // Land colour
  geoMap_c.draw();              // Draw the entire map.

  fill(BLACK);
  textSize(14);
  text("Select a state or an American territory, then click next: ", 36*width/56, height/8);
  text("American territories: ", 36*width/56, height/2.75);
  noStroke();

  // Find the country at the mouse position and draw it in different colour.
  int id = geoMap_c.getID(int((mouseX-centerX)/scaler - centerX-sbx.xpos/scaler), int(mouseY/scaler - centerY));
  if (id != -1) {
    fill(180, 120, 120);      // Highlighted land colour.
    geoMap_c.draw(id);
  }

  // Query the country at the mouse position.
  if (id != -1) {
    fill(180, 120, 120);
    geoMap_c.draw(id);

    String name = geoMap_c.getAttributeTable().findRow(str(id), 0).getString("State_Name"); 
    fill(BLACK);
    text(name, int((mouseX-centerX)/scaler - centerX-sbx.xpos/scaler), int(mouseY/scaler - centerY));
  }
  SearchBar searchBar = (SearchBar) currentScreen.searchBar;
  if (selectedState.length() != 0) {
    searchBar.setLabel(selectedState);
  } else if (input.length() != 0) {
    searchBar.setLabel(input);
  } else {
    if (errorInput || noStateSelected) {
      searchBar.setLabel("Error - Please enter a state");
    } else {
      searchBar.setLabel("Type or select a state");
    }
  }
}


void drawScreen1_2() {
  fill(206, 173, 146);        // Land colour
  switch (mapScale) {
  case -2:
    geoMap_sc = geoMap_sc_1;
    break;
  case -1:
    geoMap_sc = geoMap_sc_2;
    break;
  case 0:
    geoMap_sc = geoMap_sc_3;
    break;
  case 1:
    geoMap_sc = geoMap_sc_4;
    break;
  case 2:
    geoMap_sc = geoMap_sc_5;
    break;
  }

  geoMap_sc.readFile("States_shapefile");   // Read shapefile. //tl_2017_us_state
  geoMap_c = geoMap_sc;
  geoMap_c.draw();

  // reset scale booleans
  zoomIn = false;     
  zoomOut = false;
  zoomReset = false;

  textSize(39);
  fill(WHITE);
  textAlign(CENTER);
  text("United States of America", width/1.9, height/15);
  textAlign(LEFT);
  // Find the country at the mouse position and draw it in different colour.
  int id = geoMap_c.getID(int((mouseX-centerX)/scaler - centerX-sbx.xpos/scaler), int((mouseY-centerY)/scaler - centerY-sby.ypos/scaler));
  if (id != -1) {
    fill(180, 120, 120);      // Highlighted land colour.
    geoMap_c.draw(id);
  }

  // Query the country at the mouse position.
  if (id != -1) {
    fill(180, 120, 120);
    geoMap_c.draw(id);

    String name = geoMap_c.getAttributeTable().findRow(str(id), 0).getString("State_Name"); 
    fill(BLACK);
    text(name, (int((mouseX-centerX)/scaler - centerX-sbx.xpos/scaler)), int((mouseY-centerY)/scaler - centerY-sby.ypos/scaler));
  }
}

void drawScreen2() {
  textSize(19.5);
  SearchBar searchBar = (SearchBar) currentScreen.searchBar;

  noStroke();
  fill(230);
  rect(width/30, height/5, width/2.25, 3.5*height/5, 15);  // graph type selector panel
  fill(140);
  rect(width/1.95, height/5, width/2.25, 3.5*height/5, 15); // area search panel 1
  fill(230);

  PShape ap = createShape();  // area selector panel PShape
  ap.beginShape();

  ap.vertex(width/1.95, height/5);
  ap.vertex(width/1.95 + width/2.25, height/5);
  ap.vertex(width/1.95 + width/2.25, height/5 + 3.5*height/5);
  ap.vertex(width/1.95, height/5 + 3.5*height/5);
  ap.vertex(width/1.95, height/5);

  // hole in middle for hiding areas
  ap.beginContour();
  ap.vertex(width/1.875, height/2);
  ap.vertex(width/1.875, 23*height/26);
  ap.vertex(47*width/60, 23*height/26);
  ap.vertex(47*width/60, height/2);
  ap.vertex(width/1.875, height/2);
  ap.endContour();

  ap.endShape();
  shape(ap); // draw shape

  stroke(BLACK);
  fill(BLACK);


  text("Click one of the options below to see \na graph showing all areas within your chosen state: ", width/19.5, height/4);
  text("Or enter one of the areas from this list: ", width/1.875, height/4);


  if (input.length() != 0) {
    searchBar.setLabel(input);
  } else {
    if (errorInput) {
      searchBar.setLabel("Error - Please Enter an area inside the selected state");
    } else {
      searchBar.setLabel("Type in an area ");
    }
  }

  State state = td.getCountry(0).getState(selectedState);
  text("Areas in " + state.getName(), width/1.875, height/2.1);
  ArrayList<Area> areas = state.getAreas();
  float maxAreaHeight = 0;
  if (areas.size() > 10) {
    sld_2.canMove = true;
    sld_2.setControlHeight((5*height/13) / (areas.size() - 10));   // broken
  } else {
    sld_2.canMove = false;
    sld_2.setControlHeight(5*height/13);
  }

  sld_2.draw(); // draw screen 2 slider

  // calculate max area text height, depending on the size of the data available
  if (((height/26) * areas.size()) + height/1.875 <= 23*height/26) { // if fewer than 10 areas are on the screen, do not move height
    maxAreaHeight = -height/1.875; // negate max height, so when it's negated again, it's positive and at the correct position
  } else {
    maxAreaHeight = (height/26) * areas.size() - 23*height/26;
  }

  // the negative height of text.
  baseYCountT = -(areas.size()*height/26) * (((sld_2.y - sld_2.tMin) / (sld_2.tLimit - sld_2.tMin - sld_2.height))) + height/1.875;

  // text cannot go past these limits
  if (baseYCountT >= height/1.875) baseYCountT = height/1.875;
  if (baseYCountT <= -maxAreaHeight) baseYCountT = -maxAreaHeight;

  yCount = baseYCountT;

  for (int i = 0; i < areas.size(); i++) {
    Area a = areas.get(i);
    fill(WHITE);
    stroke(BLACK);
    fill(BLACK);
    if (yCount >= height/1.875 && yCount <= baseYCountB) {
      text(a.getName(), width/1.85, baseYCountT + (i*(height/26)));
    }
    yCount += height/26;
  }
  textAlign(LEFT);

  textAlign(BASELINE);
  if (noSelectedArea) {
    errorInput = true;
  }
}

void drawScreen3() {
  State state = td.getCountry(0).getState(selectedState);
  Area area = state.getArea(strcounty);
  ArrayList<Radio> sc3Radios_1 = screen3.radioList1;      // arraylist of radio buttons in first section (background type)
  ArrayList<Radio> sc3Radios_2 = screen3.radioList2;      // arraylist of radio buttons in second section (graph type)
  ArrayList<CheckBox> sc3Check_1 = screen3.checkBoxList;  // arraylist of checkboxes

  textAlign(CENTER);
  g1.setBarGap(250);
  g1.loadData(area.getData());
  g1.setLimits("set", 0, 100, 0, area.maxCases(), area.getData().size(), 15, color(WHITE), true);
  g1.setLabel("Dates", "Cases", area.getName() + ", " + area.getState().getName());
  g1.displayGraph();
  textAlign(LEFT);

  displayOptions();

  g1.setHoverEvent(sc3Check_1.get(0).checked);

  // select background type
  for (int i = 0; i < sc3Radios_1.size(); i++) {
    if (i == 0 && sc3Radios_1.get(i).ticked) {
      g1.setGraphBackgroundType("grid");
    }
    if (i == 1 && sc3Radios_1.get(i).ticked) {
      g1.setGraphBackgroundType("ybar");
    }
    if (i == 2 && sc3Radios_1.get(i).ticked) {
      g1.setGraphBackgroundType("blank");
    }
  }

  // if all graph types are unselected, select "bar" by default
  int count = 0;
  for (int i = 0; i < sc3Radios_2.size(); i++) {
    if (sc3Radios_2.get(i).ticked) {
      break;
    }
    count++;
    if (count == 6) {
      sc3Radios_2.get(0).ticked = true;
    }
  }

  // select graph type
  for (int i = 0; i < sc3Radios_2.size(); i++) {
    if (sc3Radios_2.get(i).ticked) {
      switch (i) {
      case 0:
        g1.setGraphElementType("bar");
        gType = "bar";
        break;
      case 1:
        g1.setGraphElementType("hist");
        gType = "hist";
        break;
      case 2:
        g1.setGraphElementType("lchart");
        gType = "lchart";
        break;
      case 3:
        g1.setGraphElementType("scatter");
        gType = "scatter";
        break;
      case 4:
        g1.setGraphElementType("hbar");
        gType = "hbar";
        break;
      case 5:
        if (!sc3Check_1.get(0).checked) {
          g1.setGraphElementType("area");
        } else {
          g1.setGraphElementType(gType);
        }
        break;
      default:
        g1.setGraphElementType(gType);
        break;
      }
    }
  }
}

void drawScreen4() {
  Country co = td.getCountry("united states");
  State state = co.getState(selectedState);
  switch(allAreasGraphType) {
  case 1: //graph3
    g3.setBarGap(250);
    g3.loadData(state.getAreaNames(), state.areaCases());
    g3.setLimits("set", 0, 100, 0, state.maxCases(), state.getAreas().size(), 15, color(WHITE), false);
    g3.setLabel("Dates", "Cases", state.getName());
    g3.displayGraph();
    break;
  case 2: //graph5
    int spread = 10;
    g5.setBarGap(250);
    g5.loadData(state.stateDiff(state.getAreas(), spread));
    g5.setLimits("set", 0, 100, 0, state.biggestDiffCases(), state.stateDiff(state.getAreas(), spread).size(), 10, color(WHITE), false);
    g5.setLabel("Dates" + "\n\n diff: " + state.biggestDiffArea() + ", " +  state.biggestDiff(), "Cases", state.getName());
    g5.displayGraph();
    break;
  case 3: //graph2
    g2.setBarGap(250);
    g2.loadData(state.totalData());
    g2.setLimits("set", 0, 100, 0, state.maxTotalData(), state.getAreas().size(), 15, color(WHITE), true);
    g2.setLabel("Dates", "Cases", state.getName());
    g2.displayGraph();
    break;
  }
}

void drawscreen4_2() {
  Country co = td.getCountry("united states");
  State state = co.getState(selectedState);
  text(startDate, 400, 100);
  text(endDate, 500, 100);

  if (date1.equalsIgnoreCase("")) {
    text("Pick the first date now!!! ;(", 500, 500);
  }
  if (date2.equalsIgnoreCase("")) {
    text("Pick the second date now!!! ;(", 750, 750);
  }

  // 10/04 - chike
  // moved error check at dropdown(int n) to here
  DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
  Date d1 = new Date(), d2 = new Date();

  // date1 as a date object for comparing
  try { 
    d1 = (Date)df.parse(date1);
  } 
  catch(Exception e) {
    // acknowledge exception and do nothing
  }
  // date2 as a date object for comparing
  try { 
    d2 = (Date)df.parse(date2);
  } 
  catch(Exception e) {
    // acknowledge exception and do nothing
  }

  if (d2.compareTo(d1) < 0) {
    // if the second date is below the first (dates in reverse order), set the second date equal to the first.
    // you could set it to a further ahead date, but that would require the Calendar class, which seems a bit excessive
    d2 = d1;
    date2 = date1;
  }
  if (datesEntered && !date1.equalsIgnoreCase("") && !date2.equalsIgnoreCase("")) {   // 10/04: a small logical error here, checking only if both weren't empty, not individual ones
    LinkedHashMap<String, Integer> stateBT = state.atDates(state.totalData(), date1, date2);
    g7.setBarGap(250);
    g7.loadData(stateBT);
    g7.setLimits("set", 0, 100, 0, state.maxBetween(), stateBT.size(), 10, color(WHITE), true);
    g7.setLabel("Dates", "Cases", state.getName());
    g7.displayGraph();
  }
}

// display text options
void displayOptions() {
  textAlign(LEFT);
  fill(WHITE);

  textSize(17);
  text("Graph Backgrounds", width/8, (12*height/16) + (3*width/160));
  text("Graph Backgrounds", width/8, (12*height/16) + (3*width/160)); // duplicate to imitate a bold font
  textSize(13);
  text("Grid", width/8 + width/30, (13*height/16) + (3*width/160));
  text("Horizontal Line", width/8 + width/30, (14*height/16) + (3*width/160));
  text("Blank", width/8 + width/30, (15*height/16) + (3*width/160));

  textSize(17);
  text("Graph Types", width/2.5, (12*height/16) + (3*width/160));
  text("Graph Types", width/2.5, (12*height/16) + (3*width/160));
  textSize(13);
  text("Bar Chart", width/2.5 + width/30, (13*height/16) + (3*width/160));
  text("Histogram", width/2.5 + width/30, (14*height/16) + (3*width/160));
  text("Line Chart", width/2.5 + width/30, (15*height/16) + (3*width/160));
  text("Scatter Plot", width/2 + width/30, (13*height/16) + (3*width/160));
  text("Horizontal Bar Chart", width/2 + width/30, (14*height/16) + (3*width/160));
  text("Area chart", width/2 + width/30, (15*height/16) + (3*width/160));

  textSize(17);
  text("Hover Event", 7*width/9, (12*height/16) + (3*width/160));
  text("Hover Event", 7*width/9, (12*height/16) + (3*width/160));
  textSize(13);
  text("Show data on hover", 7*width/9 + width/30, (13*height/16) + (3*width/160));
}

void runTweetsChoreo() {
  // Create the Choreo object using your Temboo session
  Tweets tweetsChoreo = new Tweets(session);

  // Set Profile
  tweetsChoreo.setCredential(twitterProfile);

  // Set inputs
  tweetsChoreo.setQuery(searchText);

  // Run the Choreo and store the results
  TweetsResultSet tweetsResults = tweetsChoreo.run();

  // Store results in a JSON object
  searchResults = parseJSONObject(tweetsResults.getResponse());
}

void getTweetFromJSON() {
  JSONArray statuses = searchResults.getJSONArray("statuses"); // Create a JSON array of the Twitter statuses in the object
  JSONObject tweet = statuses.getJSONObject(0); // Grab the first tweet and put it in a JSON object
  tweetText = tweet.getString("text"); // Pull the tweet text from tweet JSON object
}

void displayText() {
  println(tweetText); // Print tweet to console
}
