// odhran 14/04 - Implemented zooming in on screen 1
// beibhinn + brendan 13/04 - added NYTimes API with two different queries to display in horizontal scroll bar on home page 
//      -> not sure if it's pulling latest headlines or the same one every time - might need to make a string array of queries and switch it every so often
// chike     13/04 - Added the ability to scroll using the mouse wheel or touch pad on screen 5. Fixed scaling issues so screen 1 now scales with monitor screens. 
// brendan  13/04 - Implemented Screen transitions.
// odhran   12/04 - Implemented scrollbars
// brendan  12/04 - Fixed some bugs with the search bar on screen 1 that happened when invalid inputs are entered.
// beibhinn 11/04 - Some design changes to screen 2 - still have to add widgets so the other graphs can be accessed.
// beibhinn 10/04 - Added a scrollable listbox from the controlP5 library instead of the list of areas because it wasn't scrollable. Will fix the actual layout later!
// chike   10/04 - Fixed a bug where pressing "NEXT" before any dates were selected on screen 4.2 (g7) would cause the program to crash.
// chike    8/04 - Fixed a bug where entering dates in reverse order on screen 4.2 (g7) caused the program to crash.
// brendan  8/04 - cleaned/tidied up code by adding methods and creating a new GlobalVariables tab
// odhran   7/04 - added an image to home page and an embedded link button, a screen to see all the raw data and horizontally scrolling text bar
// brendan  7/04 - user can type in desired state alongside selecting the state from the map. if an invalid state is entered, an error is shown.
// beibhinn 7/04 - implemented the controlP5 GUI to begin making drop down lists for choosing dates - just need to get it to return a specific date and pass that to the graph 7
// beibhinn 6/04 - integrated Chike's code from loadTableData file and implemented widgets for user options to deal with graph 3,5,7 - problem with graph 7, entering dates
// Beibhinn 29/03 - integrated the design basis with the barChartAndInput program
// beibhinn 1/4 - added american territories as widgets

import controlP5.*;
import org.gicentre.geomap.*;
import java.util.AbstractMap.SimpleEntry;
import java.util.Map.Entry;
import java.util.*;
import java.text.*;

void settings() {
  // size(888, 500);
  fullScreen();
}

void setup() {
  frameRate(60); // was originally 30, but a higher framerate makes the screen transitions look much smoother.
  sbx = new Scrollbar(0, height-15, "x");
  sby = new Scrollbar(width-15, 0, "y");
  td = new TableData("cases-10k.csv");
  covidPic = loadImage("covid-pic.jpg");
  stdFont=loadFont("MS-Gothic-26.vlw");   // changed font size to match text size
  arialFont = createFont("ArialNovaCond-48.vlw", 32);
  textFont(stdFont);

  apiKey = "9OaT50AMoryO2RMBWcIYEBCHQGLAhAIx";
  url = "http://api.nytimes.com/svc/search/v2/articlesearch.json?q=coronavirus";
  query = "?q=covid-19";
  json = loadJSONObject(url+query+"&api-key="+apiKey);
  headline = json.getJSONObject("response").getJSONArray("docs").getJSONObject(0).getJSONObject("headline").getString("main");



  // Adds all valid hover events (events for widgets that light up when hovered over) to an Integer arraylist.
  validHoverEvents.add(EVENT_BUTTON1);
  validHoverEvents.add(EVENT_BUTTON2);
  validHoverEvents.add(EVENT_BUTTON3);
  validHoverEvents.add(EVENT_BUTTON4);
  validHoverEvents.add(EVENT_BUTTON5);
  validHoverEvents.add(EVENT_BUTTON6);
  validHoverEvents.add(EVENT_BUTTON7);
  validHoverEvents.add(EVENT_BUTTON8);
  validHoverEvents.add(EVENT_BUTTON9);
  validHoverEvents.add(EVENT_BUTTON18);
  validHoverEvents.add(EVENT_BUTTON19);
  validHoverEvents.add(EVENT_BUTTON20);
  validHoverEvents.add(EVENT_BUTTON21);
  validHoverEvents.add(EVENT_BUTTON23);
  validHoverEvents.add(EVENT_BUTTON24);
  validHoverEvents.add(EVENT_ALLAREA1);
  validHoverEvents.add(EVENT_ALLAREA2);
  validHoverEvents.add(EVENT_ALLAREA3);
  validHoverEvents.add(EVENT_ALLAREA_DATE);
  validHoverEvents.add(DATE_CONFIRMED);

  createScreens();                     // method to create screens
  currentScreen = screen0;

  createScrollableList();              // method to create scrollable list
  createGraphs();                      // method to create graphs
  createWidgets();                     // method to create widgets

  geoMap = new GeoMap(width/22, height/4, 3.5*width/7, height/1.75, this); 
  geoMap.readFile("States_shapefile");   // Read shapefile. //tl_2017_us_state

  for (char c : tempAlpha.toCharArray()) {
    alphabet.add(c);
  }
}


void draw() {
  pushMatrix();
  if (moveScreenY) {
    currentScreen.moveScreenY();
  } else if (moveScreenX) {
    currentScreen.moveScreenX();
  }
  if (zoomIn) {
    currentScreen.zoomIn();
  } else if (zoomOut) {
    currentScreen.zoomOut();
  } else if (zoomReset) {
    currentScreen.zoomReset();
  }
  scale(scaler);
    translate(centerX, centerY);
  moveScreenY = false;
  moveScreenX = false;
  stroke(BLACK);
  strokeWeight(1);
  background(currentScreen.backgroundColor);    
  if (slide > 0) {
    slide -= width/10;
  } else {
    slide = 0;
  }

  if (currentScreen == screen0) {
    drawScreen0();
  } else if (currentScreen == screen1) {
    drawScreen1();
  } else if (currentScreen == screen2) {
    drawScreen2();
  } else if (currentScreen == screen3) {
    drawScreen3();
  } else if (currentScreen == screen4) {
    drawScreen4();
  } else if (currentScreen == screen42) {
    drawScreen42();
  } else if (currentScreen == screen5) {
    // td.printRawData();
    td.getFormattedInfo(rawTextPos, 12);    // Using different method of printing raw data to screen to allow for easier scrolling.
  }
  currentScreen.drawWidgets();
  popMatrix();
  fill(255);
  if (currentScreen == screen1) {
    if (scaler>1) {
      line(width-15, 0, width-15, height);
      sbx.dif = width/10;
      sbx.draw();
      line(0, height-15, width, height-15);
      sby.dif = height/10;
      sby.draw();
    }
  }
  if (currentScreen == screen2) {
    if (width<1900 || height<950) {
      line(width-15, 0, width-15, height);
      sbx.dif = width/10;
      sbx.draw();
      line(0, height-15, width, height-15);
      sby.dif = height/10;
      sby.draw();
    }
  }
}

static void removeDuplicates(ArrayList arr) {
  // send arraylist to linkedhashset to preserve order and remove duplicated
  Set<Object> tempSet = new LinkedHashSet<Object>(arr);   
  arr.clear();
  arr.addAll(tempSet);
}

void keyPressed() {
  if (key == ENTER || key == RETURN) {
    if (currentScreen == screen1) {
      if (input != "") {
        selectedState = input;
        co = td.getCountry("united states");
        if (co.containsState(selectedState)) {
          state = co.getState(selectedState);
          currentScreen = screen2;
          errorInput = false;
        } else {
          errorInput = true;
          selectedState = "";
        }
        input = "";
        if (state != null) {
          ArrayList<Area> areas = state.getAreas();
          String[] arrAreas = new String[areas.size()];
          int index = 0;
          for (Area a : areas) {
            arrAreas[index] = a.getName();
            index++;
          }
          l.clear();
          l.addItems(arrAreas);
        }
      }
    } else if (currentScreen == screen2) {
      if (input != "") {
        strcounty = input;
        State state = td.getCountry(0).getState(selectedState);
        if (state.containsArea(input)) {
          currentScreen = screen3;
        } else {
          input = "";
          errorInput = true;
        }
      } else {
        noSelectedArea = true;
      }
    }
  } else if (key == BACKSPACE) {
    if (input.equalsIgnoreCase("")) {
      input = "";
      slide = width;
    } else {
      input = input.substring(0, input.length()-1);
    }
  } else if (alphabet.contains(Character.toLowerCase(key))) {
    input += key;
  }
}

void mousePressed() {
  if (sbx.hover()) {
    sbx.updatex();
    moveScreenX = true;
  } else if (sby.hover()) {
    sby.updatey();
    moveScreenY = true;
  }
  int id = geoMap.getID((mouseX-centerX)/scaler, (mouseY-centerY)/scaler);
  if (currentScreen == screen1 && id != -1) {
    selectedState = geoMap.getAttributeTable().findRow(str(id), 0).getString("State_Name");
  }
  if (currentScreen == screen42) {
    if (mouseX >= 100 && mouseX <= 300 && mouseY >= 50 && mouseY <= 150) {
      pickingDate1 = true;
      pickingDate2 = false;
    }
    if (mouseX >= 600 && mouseX <= 800 && mouseY >= 50 && mouseY <= 150) {
      pickingDate1 = false;
      pickingDate2 = true;
    }
  }

  int event = currentScreen.getEvent(int((mouseX-centerX)/scaler), int((mouseY-centerY)/scaler));

  switch (event) {
  case EVENT_BUTTON1:  
    currentScreen = screen0;
    zoomReset = true;
    query = "?q=vaccine";
    json = loadJSONObject(url+query+"&api-key="+apiKey);
    headline = json.getJSONObject("response").getJSONArray("docs").getJSONObject(0).getJSONObject("headline").getString("main");
    selectedState = "";
    input = "";
    errorInput = false;
    centerX = 0;
    centerY = 0;
    sbx.reset();
    sby.reset();
    slide = width;
    break;
  case EVENT_BUTTON2:
    sbx.reset();
    sby.reset();
    if (selectedState != "") {
      co = td.getCountry("united states");
      state = co.getState(selectedState);
      currentScreen = screen2;
      input = "";
      errorInput = false;
    } else if (input != "") {
      selectedState = input;
      co = td.getCountry("united states");
      if (co.containsState(selectedState)) {
        state = co.getState(selectedState);
        currentScreen = screen2;
        errorInput = false;
      } else {
        selectedState = "";
        errorInput = true;
      }
    } else {
      noStateSelected = true;
    }
    input = "";
    centerX = 0;
    centerY = 0;
    slide = width;
    if (state != null) {
      ArrayList<Area> areas = state.getAreas();
      String[] arrAreas = new String[areas.size()];
      int index = 0;
      for (Area a : areas) {
        arrAreas[index] = a.getName();
        index++;
      }
      l.clear();
      l.addItems(arrAreas);
    }
    break;
  case EVENT_BUTTON3:
    zoomReset = true;
    currentScreen = screen1;
    sbx.reset();
    sby.reset();
    l.setVisible(false);
    selectedState = "";
    input = "";
    errorInput = false;
    noStateSelected = false;
    centerX = 0;
    centerY = 0;
    slide = width;
    break;
  case EVENT_BUTTON4:
    zoomReset = true;
    currentScreen = screen2;
    input = "";
    errorInput = false;
    noStateSelected = false;
    cp5.get(ScrollableList.class, "dropdown").setVisible(false);
    cp5b.get(ScrollableList.class, "dropdown").setVisible(false);
    centerX = 0;
    centerY = 0;
    slide = width;
    break;
  case EVENT_BUTTON6:
    if (currentScreen == screen1) selectedState = "PUERTO RICO";
    centerX = 0;
    centerY = 0;
    break;
  case EVENT_BUTTON7:
    if (currentScreen == screen1) selectedState = "GUAM";
    centerX = 0;
    centerY = 0;
    break;
  case EVENT_BUTTON8:
    if (currentScreen == screen1) selectedState = "VIRGIN ISLANDS";
    centerX = 0;
    centerY = 0;
    break;
  case EVENT_BUTTON9:
    if (currentScreen == screen1) selectedState = "NORTHERN MARIANA ISLANDS";
    centerX = 0;
    centerY = 0;
    break;
  case EVENT_BUTTON18:
    currentScreen = screen5;
    centerX = 0;
    centerY = 0;
    slide = width;
    break;
  case EVENT_BUTTON19:
    link("https://www.cdc.gov/coronavirus/2019-ncov/index.html");
    centerX = 0;
    centerY = 0;
    break;
  case EVENT_BUTTON20:
    rawTextPos -= speed;
    // text cannot go past these limits.
    if (rawTextPos >= 1.5*baseRawTextPos) {
      // if the top of the text is greater than 1.5 times the limit
      // keep it in place
      rawTextPos = baseRawTextPos;
    }
    if (rawTextPos <= -td.getMaxTextHeight()) {
      rawTextPos = -td.getMaxTextHeight();
    }
    break;
  case EVENT_BUTTON21:
    rawTextPos += speed;
    if (rawTextPos >= 1.5*baseRawTextPos) {
      rawTextPos = baseRawTextPos;
    }
    if (rawTextPos <= -td.getMaxTextHeight()) {
      rawTextPos = -td.getMaxTextHeight();
    }
    break;
  case EVENT_BUTTON23:
    zoomIn = true;
    break;
  case EVENT_BUTTON24:
    zoomOut = true;
    print("hi");
    break;
  case EVENT_ALLAREA1:
    currentScreen = screen4;
    allAreasGraphType = 1;
    centerX = 0;
    centerY = 0;
    slide = width;
    break;
  case EVENT_ALLAREA2:
    currentScreen = screen4;
    allAreasGraphType = 2;
    centerX = 0;
    centerY = 0;
    slide = width;
    break;
  case EVENT_ALLAREA3:
    currentScreen = screen4;
    allAreasGraphType = 3;
    centerX = 0;
    centerY = 0;
    slide = width;
    break;
  case EVENT_ALLAREA_DATE:
    currentScreen = screen42;
    cp5.get(ScrollableList.class, "dropdown").setVisible(true);
    cp5.get(ScrollableList.class, "dropdown").clear();
    cp5.get(ScrollableList.class, "dropdown").addItems(state.makeDates(state.totalData()));     // add the dates for the chosen states
    cp5b.get(ScrollableList.class, "dropdown").setVisible(true);
    cp5b.get(ScrollableList.class, "dropdown").clear();
    cp5b.get(ScrollableList.class, "dropdown").addItems(state.makeDates(state.totalData()));     // add the dates for the chosen states
    datesEntered = false;
    centerX = 0;
    centerY = 0;
    slide = width;
    break;
  case DATE_CONFIRMED:
    datesEntered=true;
    centerX = 0;
    centerY = 0;
    break;
  case DATE_BUTTON11:
    centerX = 0;
    centerY = 0;
    break;
  case DATE_BUTTON12:
    centerX = 0;
    centerY = 0;
    break;
  }
}

void mouseWheel(MouseEvent me) {
  // when the mouse wheel is scrolled, move the text on screen up or down.
  float event = me.getCount();

  // test position
  rawTextPos -= event * speed;

  // text cannot go past these limits.
  if (rawTextPos >= 1.5*baseRawTextPos) {
    rawTextPos = baseRawTextPos;
  }
  if (rawTextPos <= -td.getMaxTextHeight()) {
    rawTextPos = -td.getMaxTextHeight();
  }
}

void mouseMoved() {
  if (sbx.hover())sbx.updatex();
  if (sby.hover())sby.updatey();
  int event;
  for (int i = 0; i < currentScreen.widgetList.size(); i++) {
    Widget aWidget = (Widget) currentScreen.widgetList.get(i);
    event = aWidget.getEvent(int((mouseX-centerX)/scaler), int((mouseY-centerY)/scaler));
    aWidget.setBorderIsWhite(false);
    if (validHoverEvents.contains(event)) {
      // Replaced second large switch-case statement with this.
      aWidget.setBorderIsWhite(true);
    }
  }
}

void mouseDragged() {
  if (sbx.hover()) {
    sbx.updatex();
    moveScreenX = true;
  } else if (sby.hover()) {
    sby.updatey();
    moveScreenY = true;
  }
}

void createScreens() {
  screen0 = new Screen(80); // home page
  screen1 = new Screen(100); // map page
  screen2 = new Screen(200); // type bar page
  screen3 = new Screen(100); // graph page
  screen4 = new Screen(100); // other graph page
  screen42 = new Screen(100); // and another graph page :)
  screen5 = new Screen(100);
}

void createScrollableList() {
  cp5 = new ControlP5(this);
  cp5.addScrollableList("dropdown")
    .setVisible(false)
    .setPosition(100, 50)
    .setBackgroundColor(200)
    .setSize(200, 100)
    .setBarHeight(20)
    .setItemHeight(20);

  cp5b = new ControlP5(this);
  cp5b.addScrollableList("dropdown")
    .setVisible(false)
    .setPosition(600, 50)
    .setBackgroundColor(200)
    .setSize(200, 100)
    .setBarHeight(20)
    .setItemHeight(20);

  areaList = new ControlP5(this);
  l = areaList.addListBox("Pick an area: ")
    .setVisible(false)
    .setPosition(1700, 200)
    .setSize(120, 600)
    .setItemHeight(40)
    .setBarHeight(30)
    .setColorBackground(color(150, 128))
    .setColorActive(color(150, 128))
    .setColorForeground(color(150, 128))
    ;
  l.getCaptionLabel().set("All areas in" +selectedState);
  l.getCaptionLabel().setColor(0xffff0000);
}

void dropdown(int n) {
  /* request the selected item based on index n */

  if (pickingDate1) {
    Map item = cp5.get(ScrollableList.class, "dropdown").getItem(n);
    date1 = (String) item.get("name");
    println(item.get("name"));
  } else if (pickingDate2) {
    Map itemb = cp5b.get(ScrollableList.class, "dropdown").getItem(n);
    date2 = (String) itemb.get("name");
    println(itemb.get("name"));
  }

  //println(itemb.get("name"));
}

void createGraphs() {
  // All graph queries (so far)
  // 
  // Cases against dates given area   (query req. 1)
  g1 = new Graph(150, 100, width-width/7, height/2, color(255, 255, 150, 80), color(100, 30, 100, 180), 9, "area", "ybar", false);
  // 
  // Cumulative cases against dates given state
  g2 = new Graph(150, 100, width-width/7, height/2, color(255, 255, 150, 80), color(100, 30, 100), 9, "hist", "ybar", true);
  // 
  // Cases in all areas with a state given state
  g3 = new Graph(150, 100, width-width/7, height/2, color(255, 255, 150, 80), color(100, 30, 100), 9, "bar", "ybar", false);
  // 
  // Largest difference between two consecutive dates in an area    (query req. 2)
  g4 = new Graph(150, 100, width-width/7, height/2, color(255, 255, 150, 80), color(100, 30, 100), 9, "scatter", "ybar", true);
  // 
  // Largest difference between two consecutive dates in an state
  g5 = new Graph(150, 100, width-width/7, height/2, color(255, 255, 150, 80), color(100, 30, 100), 9, "hist", "ybar", true);
  // 
  // Data in a user-chosen range of two dates in an area
  g6 = new Graph(150, 100, width-width/7, height/2, color(255, 255, 150, 80), color(100, 30, 100), 9, "lchart", "ybar", false);
  // 
  // Data in a user-chosen range of two dates in a state
  g7 = new Graph(150, 100, width-width/7, height/2, color(255, 255, 150, 80), color(100, 30, 100), 9, "hist", "ybar", false);
  // 
  // Data with highest difference between two consecutive dates between two user-chosen dates in an area. combines g4 and g6.
  g8 = new Graph(150, 100, width-width/7, height/2, color(255, 255, 150, 80), color(100, 30, 100), 9, "hist", "ybar", true);
  //
  // Data with highest difference between two consecutive dates between two user-chosen dates in a state. combines g5 and g7.
  g9 = new Graph(width/11, height/10, width-width/7, height/2, color(255, 255, 150, 80), color(100, 30, 100), 9, "hist", "ybar", true);
  // 
  // Cumulative cases against dates given country
  g10 = new Graph(width/11, height/10, width-width/7, height/2, color(255, 255, 150, 80), color(100, 30, 100), 9, "hist", "ybar", false);
}

void createWidgets() {
  // chike - 13/04: changed some (not all; i'll do that later) position values to make them scale with the screen size
  screen0.addWidget(width/7, floor(height/2.5), width/9, height/20, "Pick a State", color(BLACK), color(WHITE), stdFont, EVENT_BUTTON3);
  screen0.addWidget(width/7, floor(height/1.75), width/9, height/20, "Raw Data", color(BLACK), color(WHITE), stdFont, EVENT_BUTTON18);
  screen0.addWidget(4*width/9, height-height/11, width/9, height/20, "More information", color(BLACK), color(WHITE), stdFont, EVENT_BUTTON19);

  screen1.addWidget(width/13, height/8, width/13, height/20, "Back to Home", color(LIGHT_GREY), color(BLACK), stdFont, EVENT_BUTTON1);
  screen1.addWidget(floor(7.25*width/8), height/5, width/13, height/20, "Next", color(DARK_GREY), color(BLACK), stdFont, EVENT_BUTTON2); 
  screen1.addWidget(36*width/56, 4*height/10, width/13, height/20, "Puerto Rico", color(LAND_COLOUR), color(BLACK), stdFont, EVENT_BUTTON6);
  screen1.addWidget(36*width/56, 5*height/10, width/13, height/20, "Guam", color(LAND_COLOUR), color(BLACK), stdFont, EVENT_BUTTON7);
  screen1.addWidget(36*width/56, 6*height/10, width/13, height/20, "Virgin Islands", color(LAND_COLOUR), color(BLACK), stdFont, EVENT_BUTTON8);
  screen1.addWidget(36*width/56, 7*height/10, floor(width/8), height/20, "Northern Mariana Islands", color(LAND_COLOUR), color(BLACK), stdFont, EVENT_BUTTON9);
  screen1.createSearchBar(floor(4.5*width/7), height/5, width/4, height/20, "Type or select a state", color(WHITE), color(BLACK), stdFont, EVENT_BUTTON17);
  screen1.addWidget(floor(3*width/8), height/5+25, width/13, height/20, "Zoom in", color(DARK_GREY), color(BLACK), stdFont, EVENT_BUTTON23); 
  screen1.addWidget(floor(3*width/8), height/5-25, width/13, height/20, "Zoom out", color(DARK_GREY), color(BLACK), stdFont, EVENT_BUTTON24); 

  screen2.addWidget(50, 50, 100, 40, "Back", color(LIGHT_GREY), color(BLACK), stdFont, EVENT_BUTTON3);
  screen2.createSearchBar(1030, 250, 500, 50, "Type an Area", color(WHITE), color(BLACK), stdFont, EVENT_BUTTON5);
  screen2.addWidget(250, 300, 40, 40, "2", color(LIGHT_GREY), color(BLACK), stdFont, EVENT_ALLAREA3);
  screen2.addWidget(250, 400, 40, 40, "3", color(LIGHT_GREY), color(BLACK), stdFont, EVENT_ALLAREA1);
  screen2.addWidget(250, 500, 40, 40, "5", color(LIGHT_GREY), color(BLACK), stdFont, EVENT_ALLAREA2);
  screen2.addWidget(250, 600, 40, 40, "7", color(LIGHT_GREY), color(BLACK), stdFont, EVENT_ALLAREA_DATE);

  screen3.addWidget(100, 700, 100, 40, "Back", color(LIGHT_GREY), color(BLACK), stdFont, EVENT_BUTTON4);

  screen4.addWidget(100, 700, 100, 40, "Back", color(LIGHT_GREY), color(BLACK), stdFont, EVENT_BUTTON4);

  screen42.addWidget(400, 50, 60, 40, "NEXT", color(LIGHT_GREY), color(BLACK), stdFont, DATE_CONFIRMED);
  screen42.addWidget(100, 700, 100, 40, "Back", color(LIGHT_GREY), color(BLACK), stdFont, EVENT_BUTTON4);

  screen5.addWidget(floor(width/1.5), height/60, width/14, height/20, "Back to Home", color(LIGHT_GREY), color(BLACK), stdFont, EVENT_BUTTON1);
  screen5.addWidget(floor(width/1.1), floor(height/1.1), 100, 50, "Scroll Down", color(LIGHT_GREY), color(BLACK), stdFont, EVENT_BUTTON20);
  screen5.addWidget(floor(width/1.1), floor(height/1.3), 100, 50, "Scroll Up", color(LIGHT_GREY), color(BLACK), stdFont, EVENT_BUTTON21);
}

void drawScreen0() {
  textSize(26);
  text("Home", width/6.8, height/3.8);
  image(covidPic, width/2.7, height/5, width/2, height/2);
  fill(255);
  rect(0, height/1.2, width, height/25);
  String wrapText = headline;
  float wrapLength = textWidth(wrapText);
  fill(0);
  text(wrapText, textx, height/1.15);
  textx--;
  if (textx <=0) {
    text(headline, textx+width, height/1.15);
  }
  if (textx + wrapLength == 0) {
    textx = width-wrapLength;
  }
}

void drawScreen1() {
  stroke(0, 40);              // Boundary colour

  noStroke();
  fill(230);                 // light gray for rect
  rect(width/56, height/16, 4*width/7, 14*height/16, 15);  // geomap case (rect 1)
  stroke(0);
  fill(202, 226, 245);       // ocean color
  rect(width/28, height/12, 3.75*width/7, 13.25*height/16);  // ocean

  fill(230);
  rect(33.5*width/56, height/16, 2.75*width/7, 14*height/16, 10); // state search case (rect 2)
  fill(0);
  textFont(stdFont);
  textSize(16);
  text("United States", width/4, height/8);

  // Draw entire world map.
  fill(206, 173, 146);        // Land colour
  geoMap.draw();              // Draw the entire map.

  fill(0);
  textSize(14);
  text("Select a state or an American territory, then click next: ", 36*width/56, height/8);
  text("American territories: ", 36*width/56, height/2.75);
  noStroke();

  // Find the country at the mouse position and draw it in different colour.
  int id = geoMap.getID((mouseX-centerX)/scaler, (mouseY-centerY)/scaler);
  if (id != -1) {
    fill(180, 120, 120);      // Highlighted land colour.
    geoMap.draw(id);
  }

  // Query the country at the mouse position.
  if (id != -1) {
    fill(180, 120, 120);
    geoMap.draw(id);

    String name = geoMap.getAttributeTable().findRow(str(id), 0).getString("State_Name"); 
    fill(0);
    text(name, (mouseX-centerX)/scaler, (mouseY-centerY)/scaler);
  }
  SearchBar searchBar = (SearchBar) currentScreen.searchBar;
  if (selectedState.length() != 0) {
    searchBar.setLabel(selectedState);
  } else if (input.length() != 0) {
    searchBar.setLabel(input);
  } else {
    if (errorInput || noStateSelected) {
      searchBar.setLabel("Error - Please enter a state");
    } else {
      searchBar.setLabel("Type or select a state");
    }
  }
}

void drawScreen2() {
  textSize(20);
  SearchBar searchBar = (SearchBar) currentScreen.searchBar;
  noStroke();
  fill(230);
  rect(50, 150, 900, 800, 15);  // background rectangle1
  rect(1000, 150, 900, 800, 15); // rect2
  stroke(0);
  fill(0);
  text("Click one of the options below to see a graph showing all areas within", 70, 190);
  text("your chosen state: ", 70, 210);
  text("Or enter one of the areas from this list: ", 1030, 200);
  l.setVisible(true);
  if (input.length() != 0) {
    searchBar.setLabel(input);
  } else {
    if (errorInput) {
      searchBar.setLabel("Error - Please Enter an area inside the selected state");
    } else {
      searchBar.setLabel("Type in an area ");
    }
  }

  //State state = td.getCountry(0).getState(selectedState);
  //text("List of areas in " + state.getName(), 1200, 50);
  //ArrayList<Area> areas = state.getAreas();
  //int i = 0;

  //for (Area a : areas) {
  //  fill(WHITE);
  //  stroke(BLACK);
  //  rect(1205, 80 + (i*30), 200, 30);
  //  fill(BLACK);
  //  textAlign(CENTER);
  //  text(a.getName(), 1305, 100 + (i*30));
  //  i++;
  //  textAlign(LEFT);
  //}

  textAlign(BASELINE);
  if (noSelectedArea) {
    text("Please enter an area first.", 500, 450);
  }
}

void drawScreen3() {
  l.setVisible(false);
  State state = td.getCountry(0).getState(selectedState);
  Area area = state.getArea(strcounty);

  g1.setBarGap(400);
  g1.loadData(area.getData());
  g1.setLimits("set", 0, 100, 0, area.maxCases(), area.getData().size(), 15, color(255), true);
  g1.setLabel("Dates", "Cases", area.getName() + ", " + area.getState().getName());
  g1.displayGraph();
}

void drawScreen4() {
  l.setVisible(false);
  Country co = td.getCountry("united states");
  State state = co.getState(selectedState);
  switch(allAreasGraphType) {
  case 1: //graph3
    g3.setBarGap(250);
    g3.loadData(state.getAreaNames(), state.areaCases());
    g3.setLimits("set", 0, 100, 0, state.maxCases(), state.getAreas().size(), 15, color(255), false);
    g3.setLabel("Dates", "Cases", state.getName());
    g3.displayGraph();
    break;
  case 2: //graph5
    int spread = 10;
    g5.setBarGap(250);
    g5.loadData(state.stateDiff(state.getAreas(), spread));
    g5.setLimits("set", 0, 100, 0, state.biggestDiffCases(), state.stateDiff(state.getAreas(), spread).size(), 10, color(255), false);
    g5.setLabel("Dates" + "\n\n diff: " + state.biggestDiffArea() + ", " +  state.biggestDiff(), "Cases", state.getName());
    g5.displayGraph();
    break;
  case 3: //graph2
    g2.setBarGap(250);
    g2.loadData(state.totalData());
    g2.setLimits("set", 0, 100, 0, state.maxTotalData(), state.getAreas().size(), 15, color(255), true);
    g2.setLabel("Dates", "Cases", state.getName());
    g2.displayGraph();
    break;
  }
}

void drawScreen42() {
  l.setVisible(false);
  Country co = td.getCountry("united states");
  State state = co.getState(selectedState);
  text(startDate, 400, 100);
  text(endDate, 500, 100);

  if (date1.equalsIgnoreCase("")) {
    text("Pick the first date now!!! ;(", 500, 500);
  }
  if (date2.equalsIgnoreCase("")) {
    text("Pick the second date now!!! ;(", 750, 750);
  }

  // 10/04 - chike
  // moved error check at dropdown(int n) to here
  DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
  Date d1 = new Date(), d2 = new Date();
  try { 
    d1 = (Date)df.parse(date1);
  } 
  catch(Exception e) { 
    e.printStackTrace();
  }    // date1 as a date object for comparing
  try { 
    d2 = (Date)df.parse(date2);
  } 
  catch(Exception e) { 
    e.printStackTrace();
  }    // date2 as a date object for comparing
  if (d2.compareTo(d1) < 0) {
    // if the second date is below the first (dates in reverse order), set the second date equal to the first.
    // you could set it to a further ahead date, but that would require the Calendar class, which seems a bit excessive
    d2 = d1;
    date2 = date1;
  }
  if (datesEntered && !date1.equalsIgnoreCase("") && !date2.equalsIgnoreCase("")) {   // 10/04: a small logical error here, checking only if both weren't empty, not individual ones
    LinkedHashMap<String, Integer> stateBT = state.atDates(state.totalData(), date1, date2);
    g7.setBarGap(250);
    g7.loadData(stateBT);
    g7.setLimits("set", 0, 100, 0, state.maxBetween(), stateBT.size(), 10, color(255), true);
    g7.setLabel("Dates", "Cases", state.getName());
    g7.displayGraph();
  }
}
